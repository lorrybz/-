<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>web后端Django-前戏之数据库增删改查</title>
      <link href="/2019/01/03/web-hou-duan-django-qian-xi-zhi-shu-ju-ku-zeng-shan-gai-cha/"/>
      <url>/2019/01/03/web-hou-duan-django-qian-xi-zhi-shu-ju-ku-zeng-shan-gai-cha/</url>
      
        <content type="html"><![CDATA[<h3 id="概念引入"><a href="#概念引入" class="headerlink" title="概念引入"></a>概念引入</h3><p>ORM(objects relationship mapping): 对象关系映射；<br>objects: 管理器，默认模型的属性；</p><h3 id="1-数据增加中间表（即自己需要管理的表）"><a href="#1-数据增加中间表（即自己需要管理的表）" class="headerlink" title="1.数据增加中间表（即自己需要管理的表）"></a>1.数据增加中间表（即自己需要管理的表）</h3><h5 id="举例操作：创建一张学生表，包含名字，性别，年龄，创立日期以及更新日期；"><a href="#举例操作：创建一张学生表，包含名字，性别，年龄，创立日期以及更新日期；" class="headerlink" title="举例操作：创建一张学生表，包含名字，性别，年龄，创立日期以及更新日期；"></a>举例操作：创建一张学生表，包含名字，性别，年龄，创立日期以及更新日期；</h5><ul><li>a：在django-admin startproject app . 或者 python manage.py startapp app之后即可看见工程中有app文件，其中有一个model.py文件，进入即可。</li><li>b：创建类以及创建表名字，需要导入model模块<pre><code>from django.db import models# Create your models here.class Student(models.Model):  s_name = models.CharField(max_length=10,unique=True)  s_age = models.IntegerField(default=20)  s_gender = models.BooleanField(default=0)  create_time = models.DateTimeField(auto_now_add=True)  # auto_now_add   创建时，默认字段赋值为最新的事件  # create_time = models.DateField  updata_time = models.DateTimeField(auto_now=True)  # 修改数据是，自动赋值为更新字段时 的时间。  math = models.DecimalField(max_digits=3,decimal_places=1,null=True)  wuli = models.DecimalField(max_digits=3,decimal_places=1,null=True)  class Meta:      db_table = &#39;student&#39;</code></pre></li><li>c：在pycharm终端中执行两条迁移命令,即可在数据库中创建表；<ul><li>生成迁移文件：python manage.py makemigrations；</li><li>执行迁移文件“：python manage.py migrate；<h3 id="2-数据库的增操作"><a href="#2-数据库的增操作" class="headerlink" title="2.数据库的增操作"></a>2.数据库的增操作</h3></li></ul></li><li>a：进入url.py文件，在urlpatterns中增加路径同时导入相应模块。<pre><code>模块导入：from django.contrib import adminfrom django.urls import pathfrom app import views</code></pre>增加添加学生模块：<pre><code># https://120.0.0.1:8080/add_stu/  访问路由即可插入学生信息# 增加学生信息path(&#39;add_stu/&#39;,views.add_stu)</code></pre></li><li><p>b：进入views.py文件中导入模块以及写入相应函数方法<br>模块导入：</p><pre><code>from django.shortcuts import renderfrom django.http import HttpResponse# Create your viewshere.from app.models import Student</code></pre><p>写入添加学生方法：</p><pre><code>def add_stu(request):  #实现插入学生信息，第一种方式；  Student.objects.create(s_name=&#39;小明&#39;)  #实现插入学生信息，第二种方式，使用对象的方式进行添加学生信息。def add_stu(request):  stu = Student()  stu.s_name = &#39;lorry&#39;  stu.s_age = 26  stu.s_gender = 1  stu.save()  return  HttpResponse(&#39;创建学生成功&#39;)</code></pre><h3 id="3-数据库的删操作"><a href="#3-数据库的删操作" class="headerlink" title="3.数据库的删操作"></a>3.数据库的删操作</h3></li><li>a：进入url.py文件，在urlpatterns中增加路由路径。<pre><code>  #删除学生信息  path(&#39;del_stu/&#39;,views.del_stu),</code></pre></li><li>b：进入views.py文件中导入模块以及写入相应函数方法<br>模块导入：<pre><code>def del_stu(requset):  #实现删除  #1.获取删除的对象，filter(条件)  #2.实现删除方法，delete()  Student.objects.filter(id=3).delete()  return HttpResponse(&#39;删除学生成功&#39;)</code></pre><h3 id="4-数据库的更新操作"><a href="#4-数据库的更新操作" class="headerlink" title="4.数据库的更新操作"></a>4.数据库的更新操作</h3></li><li>a：进入url.py文件，在urlpatterns中增加路径。<pre><code>  更新学生  path(&#39;up_stu/&#39;,views.up_stu),</code></pre></li><li>b：进入views.py文件中导入模块以及写入相应函数方法<br>模块导入：<ul><li>更新的第一种方法：</li><li>说明：</li><li>1.获取更新的数据，filter(条件)</li><li>2.实现更新方法，update()<pre><code>def up_stu(requset):#Student.objects.filter(id=2).update(s_name=&#39;lorry&#39;)</code></pre></li></ul></li><li>更新的第二种方式,即可更新时间字段<pre><code>def up_stu(requset):  #更新的第二种方式,即可更新时间字段  stu = Student.objects.filter(id=2).first()  stu.s_name = &#39;lorrybz&#39;  stu.save()  return HttpResponse(&#39;更新学生成功&#39;)</code></pre><h3 id="5-数据库的查询操作"><a href="#5-数据库的查询操作" class="headerlink" title="5.数据库的查询操作"></a>5.数据库的查询操作</h3></li><li>a：进入url.py文件，在urlpatterns中增加路径。<pre><code>  #查询学生  path(&#39;sel_stu/&#39;,views.sel_stu),</code></pre></li><li>b：进入views.py文件中导入模块以及写入相应函数方法<br>######查询学生<pre><code>#导入模块from django.db.models import Avg, Max, Min, Sum, Count, Q, Fdef sel_stu(requset):  # 查询学生信息  #  查询所有的学生信息  stus = Student.objects.all()  for stu in stus:      print(stu.s_name)      print(stu.s_gender)</code></pre></li><li>使用过滤器查询学生fillter和git<pre><code>  # 查询id=2的学生，fillter  # 若是条件不成立不会报错，返回值为空  stu = Student.objects.filter(id=2).first()  print(stu.s_gender)  # 1.取唯一的一个对象  # 2.get(条件必须成立)，若是条件不成立会报错  stu = Student.objects.get(id=2)  print(stu)</code></pre></li><li>过滤出满足条件和不满条件的fillter和exclude。<pre><code>  # 过滤出不满足条件的信息上面是满足条件，下面是不满足条件的  stus = Student.objects.filter(s_gender=1)  print(stus)  stus = Student.objects.exclude(s_gender=0)  print(stus)</code></pre></li><li>排序：默认是升序，在id或者筛选条件前加 ‘-’即可将序<pre><code>  #排序order_by  stus = Student.objects.order_by(&#39;-id&#39;)  print(stus)</code></pre></li><li>取出对象中的某个字段<pre><code> stus = Student.objects.all().values(&#39;s_name&#39;,&#39;s_age&#39;) print(stus) stus = Student.objects.all().values() print(stus)</code></pre></li><li>判断查询结果是否存在<pre><code>  a = Student.objects.filter(s_name=&#39;校长&#39;).exists()  print(a)</code></pre></li><li><p>对过滤的条件进行计数，有两种方法</p><pre><code>方法1：  stus = Student.objects.filter(s_gender=1)  print(len(stus))方法2：  count = Student.objects.filter(s_gender=1).count()  print(count)  stus = Student.objects.filter(s_name=&#39;lorrybz&#39;).first()  print(stus)</code></pre></li><li><p>第二大类模糊查询contains</p><pre><code>  ##contains  # 字段——运算符  stus = Student.objects.filter(s_name__contains=&#39;小&#39;)  print(stus)  #like &#39;小%&#39;   &#39;%明&#39;  # startwith  endwith  stus = Student.objects.filter(s_name__startswith=&#39;小&#39;)  print(stus)  stus = Student.objects.filter(s_name__endswith=&#39;z&#39;)  print(stus)  # sql where id in (12345679)  # 模糊判断  stus = Student.objects.filter(id__in=[1,2,3,4,5])  print(stus)  stus = Student.objects.filter(pk__in=[1,2,3,4,5])  print(stus)</code></pre></li><li>或与非操作<pre><code>  #gt &gt;;gte &gt;=;   lt &lt;; lte &lt;=;#并且操作  stus = Student.objects.filter(s_age__gte=18,s_age__lt=20)  print(stus)  stus = Student.objects.filter(s_age__gte=18).filter(s_age__lt=20)  print(stus)</code></pre></li><li><p>聚合函数 avg max min sum count</p><pre><code>  # 聚合函数 avg max min sum count  age_avg = Student.objects.all().aggregate(Avg(&#39;s_age&#39;))  print(age_avg)  sum_avg = Student.objects.all().aggregate(Sum(&#39;s_age&#39;))  print(sum_avg)  max_avg = Student.objects.all().aggregate(Max(&#39;s_age&#39;))  print(max_avg)  min_avg = Student.objects.all().aggregate(Min(&#39;s_age&#39;))  print(min_avg)  #查询年龄大于等于18  且 小于20  stus = Student.objects.filter(s_age__gte=18, s_age__lt=20)  print(stus)  #  ，&amp; 和and 是且的操作   or 或者， 查询年龄大于等于18 或者  小于等20  stus = Student.objects.filter(Q(s_age__gte=18) | Q(s_age__lte=20))  print(stus)  stus = Student.objects.filter(~Q(s_age__gt=18))  print(stus)  #查询物理成绩大于数学成绩的学生  stus = Student.objects.all()  for stu in stus:      if stu.wuli &gt; stu.math:          print(stu.s_name)  stus = Student.objects.filter(wuli__gt=F(&#39;math&#39;)+10).first()  print(stus.s_name)</code></pre></li><li>最后一句通用的：<pre><code>  return HttpResponse(&#39;查询所有学生信息&#39;)</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>非关系型数据库</title>
      <link href="/2019/01/02/fei-guan-xi-xing-shu-ju-ku-2redis/"/>
      <url>/2019/01/02/fei-guan-xi-xing-shu-ju-ku-2redis/</url>
      
        <content type="html"><![CDATA[<h2 id="第一部分redis的安装以及挂载"><a href="#第一部分redis的安装以及挂载" class="headerlink" title="第一部分redis的安装以及挂载"></a>第一部分redis的安装以及挂载</h2><h3 id="1-进入Linux系统或者在服务器中下载文件"><a href="#1-进入Linux系统或者在服务器中下载文件" class="headerlink" title="1.进入Linux系统或者在服务器中下载文件"></a>1.进入Linux系统或者在服务器中下载文件</h3><p>wget <a href="http://download.redis.io/releases/redis-5.0.3.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-5.0.3.tar.gz</a></p><h3 id="2-解压文件"><a href="#2-解压文件" class="headerlink" title="2.解压文件"></a>2.解压文件</h3><p>gunzip redis-5.0.3.tar.gz</p><h3 id="3-解归档文件，以及切换至redis-5-0-3-文件夹中"><a href="#3-解归档文件，以及切换至redis-5-0-3-文件夹中" class="headerlink" title="3.解归档文件，以及切换至redis-5.0.3/文件夹中"></a>3.解归档文件，以及切换至redis-5.0.3/文件夹中</h3><p>tar -xvf redis-5.0.3.tar  ； cd redis-5.0.3/<br><strong>补充：1.gcc -v  or  gcc –version;查看当前gcc版本</strong><br>     <strong>2.ps -ef | grep redis</strong></p><h3 id="4-执行安装redis-执行第一句安装，接着第二句"><a href="#4-执行安装redis-执行第一句安装，接着第二句" class="headerlink" title="4.执行安装redis,执行第一句安装，接着第二句"></a>4.执行安装redis,执行第一句安装，接着第二句</h3><p>make &amp;&amp; make install  </p><h3 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5.启动服务"></a>5.启动服务</h3><ul><li>（1）redis-server;  直接在前台运行且裸奔；</li><li>（2）redis-server &amp;; 在后台运行且裸奔；</li><li>（3）redis-server &gt; redis.log 2&gt; redis-error.log &amp;;在后台运行且裸奔，实质是将日志重定向到redis.log，且若是错误的结束将错误日志重定向到redis-error.log中；</li><li>（7）redis-server –requirepass 123456 &gt; redis.log 2&gt; redis-error.log &amp; 在后台运行，重定向日志，设置密码且不裸奔，但若是错误结束将u自动保存；</li><li>（8）redis-server –requirepass lorry1234 –appendonly yes &gt; redis.log 2&gt; redis-error.log &amp;  在后台运行，重定向日志，不裸奔，自动保存；<h3 id="6-进入客户端"><a href="#6-进入客户端" class="headerlink" title="6.进入客户端,"></a>6.进入客户端,</h3>redis-cli;链接自己<br>redis-cli -h 120.77.45.55 -p 6379 -a 1qaz2wsx<h3 id="7-当出现遗传ip时即可输入密码进入"><a href="#7-当出现遗传ip时即可输入密码进入" class="headerlink" title="7.当出现遗传ip时即可输入密码进入"></a>7.当出现遗传ip时即可输入密码进入</h3>auth lorry1234;</li></ul><h2 id="第二部分redis简介"><a href="#第二部分redis简介" class="headerlink" title="第二部分redis简介"></a>第二部分redis简介</h2><p>kv存储系统 - REmote DIctionary Server<br>提供高速缓存服务、缓存热点数据<br>缓解了数据的压力，访问数据不用直接访问数据库</p><h2 id="第三部分redis一部分基操"><a href="#第三部分redis一部分基操" class="headerlink" title="第三部分redis一部分基操"></a>第三部分redis一部分基操</h2><ul><li>心跳事件：ping</li><li>查看历史：history -c</li><li>设置键值对：set username lorry</li><li>取值：get username </li><li>设置键值对生存时间：set email <a href="mailto:lorry@qq.com" target="_blank" rel="noopener">lorry@qq.com</a> ex 20</li><li>设置未设置生存时间的键值对的生存时间：expire key </li><li>查看键值生存时间:ttl email</li><li>删除键值对:del key</li><li>查看所有的键值对:keys *</li><li>key y<em>  ,key u</em> :等我查查</li><li>清空数据库：flushdb</li><li>清楚所有数据库中的所有键值对：flushall</li><li>判断键是否存在：exists key；返回值是布尔值；</li><li>换底层数据库，默认中有16个数据库：select 1   ；编号为（0-15）</li><li>关闭服务器：shutdown</li><li>退出：quit</li><li>保存：save ，后台保存：bgsave </li><li>查看当前数据库有多少键值对：dbsize  </li><li>执行时加1 ：incr   </li><li>执行时加100：incrby 100；100可以自定义</li><li>减1：decr</li><li>减200：decrby 200；<h3 id="redis提供了两种是九华数据的方案："><a href="#redis提供了两种是九华数据的方案：" class="headerlink" title="redis提供了两种是九华数据的方案："></a>redis提供了两种是九华数据的方案：</h3>1.RDB - 默认开启<br>2.AOF - 默认关闭  –appendonly yes   意外情况只是丢失1秒钟的数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web后端Django-前戏</title>
      <link href="/2019/01/02/web-hou-duan-django-qian-xi-zhi-huan-jing-da-jian/"/>
      <url>/2019/01/02/web-hou-duan-django-qian-xi-zhi-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-配置虚拟环境"><a href="#1-配置虚拟环境" class="headerlink" title="1.配置虚拟环境"></a>1.配置虚拟环境</h3><h4 id="（1）pycharm中直接配置"><a href="#（1）pycharm中直接配置" class="headerlink" title="（1）pycharm中直接配置"></a>（1）pycharm中直接配置</h4><ul><li>A.在pycharm中创建工程时，就开始创建虚拟环境。</li><li>B.安装django pymysql django-redis    <ul><li>pycharm终端命令：pip install django pymysql django-redis</li></ul></li><li>C.将依赖库重定向到文件中，方便别人copy时直接通过txt配置虚拟环境<ul><li>终端命令：pip freeze &gt; requirements.txt</li><li>例如：将文件中的依赖库一句话安装到虚拟环境中</li><li>pip install -r requirements.txt </li></ul></li><li>D.开始Django项目,注意最后有一个空格 + .。<ul><li>终端命令：django-admin startproject hellodjango .</li></ul></li><li>E.执行项目，manage.py是自动创好的。<ul><li>终端命令：python manage.py runserver</li><li>执行后可以通过<a href="http://localhost:8000或者http://127.0.0.1:8000进行查看" target="_blank" rel="noopener">http://localhost:8000或者http://127.0.0.1:8000进行查看</a></li></ul></li><li>F.（1）第一次迁移<ul><li>数据库迁移（是在数据库配置好之后执行的命令），建立十张表</li><li>终端命令：python manage.py migrate<br>-（2）以后的迁移：当建立中间表需要在数据库持久化则需要再次迁移</li><li>生成迁移文件：python manage.py makemigrations</li><li>执行迁移文件“：python manage.py migrate</li></ul></li><li>G.Django创建管理员账号<ul><li>python manage.py createsuperuser</li></ul></li></ul><h4 id="（2）windows中cmd、redhat、centos等中虚拟环境的配置"><a href="#（2）windows中cmd、redhat、centos等中虚拟环境的配置" class="headerlink" title="（2）windows中cmd、redhat、centos等中虚拟环境的配置"></a>（2）windows中cmd、redhat、centos等中虚拟环境的配置</h4><ul><li>A：准备工作1<ul><li>在自己记得住的文件夹下创建两个文件夹用于区分虚拟环境和工作环境分别为env(虚拟环境)和workspace工作环境</li></ul></li><li>AA：准备工作2<ul><li>给全局配置安装虚拟环境</li><li>终端命令：pip install virtualenv</li></ul></li><li>B：配置项目的单独的虚拟环境<ul><li>在cmd或者其余的系统中将路径切换到enc目录下。建议使用git或者xsheel，不使用cmd**终端。</li><li>终端指令：virtualenv –no-site-packages -p C:\Users\ThinkPad\AppData\Local\Programs\Python\Python37\python.exe DJenv1808</li><li>代码解释：</li><li>–no-site-packages：创建纯净环境，无杂质。</li><li>-p：python版本的绝对路径，是针对系统上有多个python版本。若只有一个直接不写。</li><li>DJenv1808  ：存放工程的虚拟环境的文件夹。</li></ul></li><li>C：激活、杀死环境<ul><li>进入enc/Scripts文件夹</li><li>cmd中：进入文件夹后直接输入：activate。然后回车即激活环境。</li><li>mac以及无界面系统中进入文件夹后输入：source activate。然后回车即激活环境。</li><li><strong>状态激活标识：在终端中显示将会出现    （(DJenv1808)）</strong></li><li>退出环境：所有的退出环境操作均一样。终端操作命令：deactivate   </li></ul></li><li>D：在激活状态下<ul><li>a（pycharm中可在中断中执行上述的操作进行。</li><li>b在cmd以及其他中：<h6 id="（1）将目录切换至之前创建的workspace下，创建django文件夹"><a href="#（1）将目录切换至之前创建的workspace下，创建django文件夹" class="headerlink" title="（1）将目录切换至之前创建的workspace下，创建django文件夹"></a>（1）将目录切换至之前创建的workspace下，创建django文件夹</h6><h6 id="（2）执行代码：django-admin-startproject-test"><a href="#（2）执行代码：django-admin-startproject-test" class="headerlink" title="（2）执行代码：django-admin startproject test"></a>（2）执行代码：django-admin startproject test</h6></li></ul></li><li>E：用pycharm打开为项目名称的这个工程<ul><li>在pycharm终端中启动命令：python manange.py runserver   8080 or 0.0.0.0:8080即可看到页面。</li></ul></li><li>G：创建app子工程<ul><li>在pycharm的终端中执行代码：python manage.py startapp app</li></ul></li><li>H.（1）第一次迁移<ul><li>数据库迁移（是在数据库配置好之后执行的命令），建立十张表</li><li>终端命令：python manage.py migrate<br>-（2）以后的迁移：当建立中间表需要在数据库持久化则需要再次迁移</li><li>生成迁移文件：python manage.py makemigrations</li><li>执行迁移文件“：python manage.py migrate</li></ul></li><li>I :对后台数据创建超级管理员<ul><li>.终端执行代码：python manage.py createsuperuser<h3 id="2-MVT和MVC模式："><a href="#2-MVT和MVC模式：" class="headerlink" title="2.MVT和MVC模式："></a>2.MVT和MVC模式：</h3><strong>MVT模式是由MVC模式演变出来的，MVC模式是所有框架遵循的模式</strong><br>MVT：M：models.py——模型层<br> V：views.py————视图层<br> C：templates————模板，定义页面HTML的地方<br>MVC：<br>M:模型层<br>V：模板：HTML页面<br>C：controller，控制器，写业务逻辑的地方<h3 id="3-pip相关用法"><a href="#3-pip相关用法" class="headerlink" title="3.pip相关用法"></a>3.pip相关用法</h3></li></ul></li><li>查看虚拟环境下安装的所有的包　：pip list<ul><li>查看虚拟环境重通过pip安装的包 ：pip freeze    </li><li>查看是否冲突：pip check<h4 id="4-数据库配置"><a href="#4-数据库配置" class="headerlink" title="4.数据库配置"></a>4.数据库配置</h4></li></ul></li><li>当完成相关配置后即可配置数据库：找到test下setting.py.大概80行的位置。修改database为<pre><code>DATABASES = {  &#39;default&#39;: {      &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,      &#39;NAME&#39;: &#39;dj8&#39;,      &#39;USER&#39;:&#39;root&#39;,      &#39;PASSWORD&#39;:&#39;*****&#39;, #数据库密码      &#39;HOST&#39;:&#39;120.0.0.0&#39;, #服务器或者本地地址      &#39;PORT&#39;:3306,      &#39;TIME_ZONE&#39;:&#39;Asia/Chongqing&#39;  }}</code></pre><h4 id="5修改访问权限"><a href="#5修改访问权限" class="headerlink" title="5修改访问权限"></a>5修改访问权限</h4><pre><code>ALLOWED_HOSTS = [&#39;*&#39;]   #允许访问的主机ip地址</code></pre><h4 id="6-语言时区修改"><a href="#6-语言时区修改" class="headerlink" title="6.语言时区修改"></a>6.语言时区修改</h4><pre><code>LANGUAGE_CODE = &#39;zh-hans&#39;TIME_ZONE = &#39;Asia/Chongqing&#39;</code></pre><h4 id="7-数据库模块配置"><a href="#7-数据库模块配置" class="headerlink" title="7.数据库模块配置"></a>7.数据库模块配置</h4></li><li>a.在pycharm终端中执行代码：pip install pymysql <ul><li>此操作时连接国外网站进行下载可以通过其他方法进行提升</li><li>方法（1）：pip install -i <a href="https://pypi.doubanio.com/sample" target="_blank" rel="noopener">https://pypi.doubanio.com/sample</a> pymysql提升下载速度</li><li>方法（2）：修改系统配置文件</li><li>在C盘user或者用户下找到当前的管家（我的是thinkpad）新建一个文件夹pip,再新建一个后缀为ini文件名为pip的文件。</li><li>编辑文件为下内容即可<pre><code>[global]index-url=https://pypi.doubanio.com/simple</code></pre></li></ul></li><li>b.在ini.py文件中写下一下代码：<pre><code>import pymysqlpymysql.install_as_MySQLdb()</code></pre>前戏配置完毕</li></ul>]]></content>
      
      
      <categories>
          
          <category> web后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库操作-建表</title>
      <link href="/2018/12/26/shu-ju-ku-cao-zuo-jian-biao/"/>
      <url>/2018/12/26/shu-ju-ku-cao-zuo-jian-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><p>– 如果存在srs的数据库就删除它（慎重），之后创建数据库并且进入数据库。</p><pre><code>drop database if exists srs;create database srs default charset utf8;use srs;</code></pre><h3 id="2-创建二维表"><a href="#2-创建二维表" class="headerlink" title="2.创建二维表"></a>2.创建二维表</h3><p>例子：创建学生管理表并且添加信息</p><h4 id="1-创建学员表"><a href="#1-创建学员表" class="headerlink" title="1.创建学员表"></a>1.创建学员表</h4><pre><code>create table tb_college(collid int not null auto_increment comment &#39;学院编号&#39;,collname varchar(50) not null comment &#39;学院名称&#39;,collmaster varchar(20) not null comment &#39;院长姓名&#39;,collweb varchar(511) default &#39;&#39; comment &#39;学院网站&#39;,primary key (collid));</code></pre><ul><li>添加唯一性约束到学院名称<pre><code>alter table tb_college add constraint uni_college_collname unique (collname);</code></pre><h4 id="2-创建学生表"><a href="#2-创建学生表" class="headerlink" title="2.创建学生表"></a>2.创建学生表</h4><pre><code>create table tb_student(stuid int not null comment &#39;学号&#39;,sname varchar(20) not null comment &#39;学生姓名&#39;,gender bit default 1 comment &#39;性别&#39;,birth date not null comment &#39;出生日期&#39;,addr varchar(255) default &#39;&#39; comment &#39;籍贯&#39;,collid int not null comment &#39;所属学院编号&#39;,primary key (stuid));</code></pre></li><li>检查约束，mysql不支持：<pre><code>alter table tb_student add constraint ck_student_birth check (birth between &#39;1990-1-1&#39; and &#39;1999-12-31&#39;);</code></pre></li><li>添加外键约束<pre><code>alter table tb_student add constraint fk_student_collid foreign key (collid) references tb_college (collid);</code></pre><h4 id="3-创建教师表"><a href="#3-创建教师表" class="headerlink" title="3.创建教师表"></a>3.创建教师表</h4><pre><code>create table tb_teacher(teaid int not null comment &#39;教师工号&#39;,tname varchar(20) not null comment &#39;教师姓名&#39;,title varchar(10) default &#39;&#39; comment &#39;职称&#39;,collid int not null comment &#39;所属学院编号&#39;);</code></pre></li><li>添加外键约束<pre><code>alter table tb_teacher add constraint pk_teacher primary key (teaid);</code></pre></li><li>添加外键约束<pre><code>alter table tb_teacher add constraint fk_teacher_collid foreign key (collid) references tb_college (collid);</code></pre><h4 id="4-插入学院数据"><a href="#4-插入学院数据" class="headerlink" title="4.插入学院数据"></a>4.插入学院数据</h4></li><li>插入学院数据<br><code>`</code><br>insert into tb_college (collname, collmaster, collweb) values<br>(‘计算机学院’, ‘左冷禅’, ‘<a href="http://www.abc.com" target="_blank" rel="noopener">http://www.abc.com</a> </li></ul><p>‘),<br>(‘外国语学院’, ‘岳不群’, ‘<a href="http://www.xyz.com" target="_blank" rel="noopener">http://www.xyz.com</a> </p><p>‘),<br>(‘经济管理学院’, ‘风清扬’, ‘<a href="http://www.foo.com" target="_blank" rel="noopener">http://www.foo.com</a> </p><p>‘);</p><pre><code>#### 5.插入学生数据</code></pre><p>insert into tb_student (stuid, sname, gender, birth, addr, collid) values<br>(1001, ‘杨逍’, 1, ‘1990-3-4’, ‘四川成都’, 1),<br>(1002, ‘任我行’, 1, ‘1992-2-2’, ‘湖南长沙’, 1),<br>(1033, ‘王语嫣’, 0, ‘1989-12-3’, ‘四川成都’, 1),<br>(1572, ‘岳不群’, 1, ‘1993-7-19’, ‘陕西咸阳’, 1),<br>(1378, ‘纪嫣然’, 0, ‘1995-8-12’, ‘四川绵阳’, 1),<br>(1954, ‘林平之’, 1, ‘1994-9-20’, ‘福建莆田’, 1),<br>(2035, ‘东方不败’, 1, ‘1988-6-30’, null, 2),<br>(3011, ‘林震南’, 1, ‘1985-12-12’, ‘福建莆田’, 3),<br>(3755, ‘项少龙’, 1, ‘1993-1-25’, null, 3),<br>(3923, ‘杨不悔’, 0, ‘1985-4-17’, ‘四川成都’, 3);</p><pre><code>#### 6.插入老师数据</code></pre><p>insert into tb_teacher (teaid, tname, title, collid) values<br>(1122, ‘张三丰’, ‘教授’, 1),<br>(1133, ‘宋远桥’, ‘副教授’, 1),<br>(1144, ‘杨逍’, ‘副教授’, 1),<br>(2255, ‘范遥’, ‘副教授’, 2),<br>(3366, ‘韦一笑’, ‘讲师’, 3);</p><pre><code>#### 7. 插入课程数据</code></pre><p>insert into tb_course (couid, cname, credit, teaid) values<br>(1111, ‘Python程序设计’, 3, 1122),<br>(2222, ‘Web前端开发’, 2, 1122),<br>(3333, ‘操作系统’, 4, 1122),<br>(4444, ‘计算机网络’, 2, 1133),<br>(5555, ‘编译原理’, 4, 1144),<br>(6666, ‘算法和数据结构’, 3, 1144),<br>(7777, ‘经贸法语’, 3, 2255),<br>(8888, ‘成本会计’, 2, 3366),<br>(9999, ‘审计学’, 3, 3366);</p><pre><code>#### 8.插入选课数据</code></pre><p>insert into tb_score (sid, cid, seldate, mark) values<br>(1001, 1111, ‘2017-09-01’, 95),<br>(1001, 2222, ‘2017-09-01’, 87.5),<br>(1001, 3333, ‘2017-09-01’, 100),<br>(1001, 4444, ‘2018-09-03’, null),<br>(1001, 6666, ‘2017-09-02’, 100),<br>(1002, 1111, ‘2017-09-03’, 65),<br>(1002, 5555, ‘2017-09-01’, 42),<br>(1033, 1111, ‘2017-09-03’, 92.5),<br>(1033, 4444, ‘2017-09-01’, 78),<br>(1033, 5555, ‘2017-09-01’, 82.5),<br>(1572, 1111, ‘2017-09-02’, 78),<br>(1378, 1111, ‘2017-09-05’, 82),<br>(1378, 7777, ‘2017-09-02’, 65.5),<br>(2035, 7777, ‘2018-09-03’, 88),<br>(2035, 9999, curdate(now()), null),<br>(3755, 1111, date(now()), null),<br>(3755, 8888, date(now()), null),<br>(3755, 9999, ‘2017-09-01’, 92);<br><code>`</code></p><h3 id="相关sql语句练习"><a href="#相关sql语句练习" class="headerlink" title="相关sql语句练习"></a>相关sql语句练习</h3><p>– 总结 分组之前的筛选用where子句，分组之后的子句筛选用having。</p><ul><li>查询所有学生信息</li><li>查询所有课程名称及学分(投影和别名)</li><li>查询所有女学生的姓名和出生日期(筛选)</li><li>查询所有80后学生的姓名、性别和出生日期(筛选)</li><li>查询所有80后学生的姓名、性别和出生日期(筛选)，使用mysql中的分支函数</li><li>查询名字有四个中文字符字符的学生学号和姓名,一个中文三个字节</li><li>查询姓”杨“的学生姓名和性别(模糊)</li><li>查询姓”杨“名字两个字的学生姓名和性别(模糊)</li><li>查询姓”杨“名字三个字的学生姓名和性别(模糊)</li><li>查询名字中有”不“字或“嫣”字的学生的姓名(模糊)</li><li>查询没有录入家庭住址的学生姓名(空值)  更加的严谨</li><li>查询录入了家庭住址的学生姓名(空值) 摩根定律</li><li>查询学生选课的所有日期(去重)– distinct</li><li>查询学生的家庭住址(去重)</li><li>查询男学生的姓名和生日按年龄从大到小排列(排序)– 升序   asc 默认</li><li>聚合函数 max min sum avg count</li><li>查询年龄最大的学生的出生日期(聚合函数)</li><li>查询男女学生的人数(分组和聚合函数)</li><li>查询课程编号为1111的课程的平均成绩(筛选和聚合函数)</li><li>查询学号为1001的学生所有课程的平均分(筛选和聚合函数)</li><li>查询每个学生的学号和平均成绩(分组和聚合函数)</li><li>查询平均成绩大于等于90分的且学号为1开头的学生的学号和平均成绩</li><li>查询年龄最大的学生的姓名(子查询) 把一个查询的结果当做另一个查询的一部分来使用</li><li>查询年龄最大的学生姓名和年龄(子查询+运算)</li><li>查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)</li><li>查询学生姓名、课程名称以及成绩(链接查询) 链接查询时，如果不使用链接条件，将会产生笛卡尔积</li><li>查询选课学生的姓名和平均成绩(子查询和连接查询)</li><li>查询每个学生的姓名和选课数量(左外连接和子查询)<br>(左表：多表查询时，写在前面的表称为左表left outer join，right outer join ，mysql不支持全外连接 ：full outer join<br>– 左外连接，将左表不满足连接条件的记录也要查出来，不满足链表条件的的地方补null<br>– 右外连接，将右表不满足连接条件的记录也要查出来，不满足链表条件的的地方补null<br>– 内连接只能将满足条件的表链接起来，不满足的链接条件的不能查出)</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux基操</title>
      <link href="/2018/12/26/linux-zhuang-ruan-jian/"/>
      <url>/2018/12/26/linux-zhuang-ruan-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux安装软件"><a href="#Linux安装软件" class="headerlink" title="Linux安装软件"></a>Linux安装软件</h3><p><strong>docker</strong>：虚拟化服务，创建虚拟化容器，并安装软件</p><h4 id="1-包管理管理工具-yum、rpm"><a href="#1-包管理管理工具-yum、rpm" class="headerlink" title="1.包管理管理工具 -yum、rpm"></a>1.包管理管理工具 -yum、rpm</h4><ul><li>yum -y install docker-io   安装docker<ul><li>yum -y removie docker-io  卸载docker</li><li>yum info…    </li><li>yum search… </li><li>yum list installed | grep docker    查看docker中挂在的软件<h4 id="2-管理docker服务"><a href="#2-管理docker服务" class="headerlink" title="2.管理docker服务"></a>2.管理docker服务</h4></li></ul></li><li>systemctl start docker<ul><li>systemctl stop docker</li><li>systemctl restart docker</li><li>systemctl status docker   状态</li><li>systemctl enable docker</li><li>systemctl disable docker</li></ul></li></ul><p><strong>补充</strong>：<br><strong>Mysql数据库超级管理云账号 - root<br>Oracle数据库超级管理员账号 - sys<br>SQLServer数据库管理员账号 </strong></p><h4 id="3-阿里云中docker安装mysql5-7步骤"><a href="#3-阿里云中docker安装mysql5-7步骤" class="headerlink" title="3.阿里云中docker安装mysql5.7步骤"></a>3.阿里云中docker安装mysql5.7步骤</h4><p>  a 下载mysql的镜像文件：docker pull mysql：5.7<br>  b 查看已经下载的镜像文件:  docker images<br>  c 创建并运行容器:docker run -d -p 3306:3306 –name mysql57 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7    (需要打开3306端口)<br>  d 安装MySQL客户端工具</p><pre><code>- navicat  -猫- SQLyog   -海豚- Toad for MySQL -蛤蟆</code></pre><h4 id="4-查看运行中的程序"><a href="#4-查看运行中的程序" class="headerlink" title="4.查看运行中的程序"></a>4.查看运行中的程序</h4><ul><li>docker ps<h4 id="5-查看所有的容器"><a href="#5-查看所有的容器" class="headerlink" title="5.查看所有的容器"></a>5.查看所有的容器</h4></li><li>docker container ls -a<h4 id="6-停止启动容器"><a href="#6-停止启动容器" class="headerlink" title="6.停止启动容器"></a>6.停止启动容器</h4></li><li>docker stop masql57<ul><li>docker start mysql57</li><li>docker restart mysql57<h4 id="7-删除容器"><a href="#7-删除容器" class="headerlink" title="7.删除容器"></a>7.删除容器</h4></li></ul></li><li>docker rm -f  mysql</li></ul><h3 id="Linux操作常识补充"><a href="#Linux操作常识补充" class="headerlink" title="Linux操作常识补充"></a>Linux操作常识补充</h3><p>1.将前台任务放到后台，且暂停   ctrl+z；<br>2.前台任务直接gg。                     ctrl+c；<br>3.查看网络端口；ip，                  netstat -nap | grep 3306<br>4.查看后台程序                        jobs<br>5.将后台程序在后台启动              bg %num，num是后台进程编号<br>6.man 命令既可以查询相关的方法 man netstat<br>7.info netstat</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yum </tag>
            
            <tag> rpm </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库知识1</title>
      <link href="/2018/12/26/shu-ju-ku-chang-shi/"/>
      <url>/2018/12/26/shu-ju-ku-chang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h3><p>数据库是为了实现项目中的数据持久性 </p><h3 id="2-数据库的类型"><a href="#2-数据库的类型" class="headerlink" title="2.数据库的类型"></a>2.数据库的类型</h3><h4 id="2-1关系型数据库"><a href="#2-1关系型数据库" class="headerlink" title="2.1关系型数据库"></a>2.1关系型数据库</h4><ul><li>特点：<ul><li>1.理论基础：集合论和关系型代数</li><li>2.用二维表来阻止数据（行（记录）和列（字段））</li><li>3.SQL - 结构化查询语言</li><li>关系型数据库产品：</li><li>1.Oracle - 甲骨文</li><li>2.mysql  - 甲骨文 - MariaDB</li><li>3.DB2，SQLServer、PsotgreSQL、SQLite<br><strong>能够唯一标记一条记录的列成为主键（primary key）</strong></li><li>4.SQL - 结构化查询语言</li><li>DDL - 数据定义语言 - create，drop，alter</li><li>DML - 数据操作语言 - insert，delete，updata，select</li><li>DCL - 数据控制语言 - grant，revoke，commit，rollback<br> <strong>介绍两个关键词，crash course  和 best practice</strong></li></ul></li></ul><h4 id="2-2NoAQL非关系型数据库"><a href="#2-2NoAQL非关系型数据库" class="headerlink" title="2.2NoAQL非关系型数据库"></a>2.2NoAQL非关系型数据库</h4><ul><li>1.MongoDB - 文档数据库 - 适合大量但是价值低的数据库<ul><li>2.Redis - kv 数据库 - 性能好适合做高速缓存服务</li><li>3.ElsaticSearch - 搜索引擎</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>blog_setting介绍</title>
      <link href="/2018/12/22/blog-setting/"/>
      <url>/2018/12/22/blog-setting/</url>
      
        <content type="html"><![CDATA[<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a>设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>每天动态切换<code>Banner</code>图片</li><li>瀑布流式的博客文章列表(文章无特色图片时会有<code>24</code>张漂亮的图片代替)</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持<code>MathJax</code></li><li><code>TOC</code>目录</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>和<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>评论模块（推荐使用<code>Gitalk</code>）</li><li>集成了谷歌分析(<code>Google Analytics</code>)</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>博客了，Hexo 和<a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a>来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的<code>_config.yml</code>的<code>theme</code>的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml文件的其它修改建议"><a href="#config-yml文件的其它修改建议" class="headerlink" title="_config.yml文件的其它修改建议:"></a><code>_config.yml</code>文件的其它修改建议:</h4><ul><li>请修改<code>_config.yml</code>的<code>url</code>的值为你的网站主<code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个<code>per_page</code>的分页条数值为<code>6</code>的倍数，如：<code>12</code>、<code>18</code>等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改<code>language</code>的值为<code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code>页是用来展示所有分类的页面，如果在你的博客<code>source</code>目录下还没有<code>categories/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件<code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code>页是用来展示所有标签的页面，如果在你的博客<code>source</code>目录下还没有<code>tags/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件<code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code>页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客<code>source</code>目录下还没有<code>about/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件<code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code>页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客<code>source</code>目录下还没有<code>friends/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件<code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客<code>source</code>目录下新建<code>_data</code>目录，在<code>_data</code>目录中新建<code>friends.json</code>文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"lorry——Python"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"Python_遇见那天的雨真大"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.jianshu.com/u/cf22212f3cdf"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去观摩"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a>的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下<code>_config.yml</code>文件中<code>highlight.enable</code>的值为<code>false</code>，并新增<code>prism</code>插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a>的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于<code>SEO</code>，且<code>gitment</code>评论对中文链接也不支持。我们可以用<a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a>插件也可以生成非中文的链接。</p></blockquote><h3 id="添加RSS订阅支持（可选的）"><a href="#添加RSS订阅支持（可选的）" class="headerlink" title="添加RSS订阅支持（可选的）"></a>添加RSS订阅支持（可选的）</h3><p>本主题中还使用到了<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a>的 Hexo 插件来做<code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code>重新生成博客文件，然后在<code>public</code>文件夹中即可看到<code>atom.xml</code>文件，说明你已经安装成功了。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题文件的<code>/layout/_partial/social-link.ejs</code>文件中，你可以修改或添加你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a>中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的<code>Font Awesome</code>版本为<code>4.5.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的<code>source/medias/reward</code>文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h2 id="文档示例"><a href="#文档示例" class="headerlink" title="文档示例"></a>文档示例</h2><p>以下为文章<code>Front-matter</code>的示例，所有内容均为<strong>非必填</strong>的。但是，仍然建议至少填写<code>title</code>的值，当然最好都填写上这些文章信息。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg <span class="token comment" spellcheck="true"># 或者:http://xxx.com/xxx.jpg</span><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 如果top值为true，则会是首页推荐文章</span><span class="token comment" spellcheck="true"># 如果要对文章设置阅读验证密码的话，就可以在设置password的值，该值必须是用SHA256加密后的密码，防止被他人识破</span><span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token comment" spellcheck="true"># 本文章是否开启mathjax，且需要在主题的_config.yml文件中也需要开启才行</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><blockquote><p><strong>注意</strong>:</p><ol><li>如果<code>img</code>属性不填写的话，文章特色图会根据文章标题的<code>hashcode</code>的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code>的值尽量保证每篇文章是唯一的，因为本主题中<code>Gitalk</code>和<code>Gitment</code>识别<code>id</code>是通过<code>date</code>的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在Front-matter中设置采用了SHA256加密的password的值，还需要在主题的<code>_config.yml</code>中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li></ol></blockquote><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的<code>_config.yml</code>中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>首页的励志名言</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC目录</li><li>文章打赏信息</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code>和<code>disqus</code>评论配置</li><li>谷歌分析(<code>Google Analytics</code>)</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的<code>hashcode</code>值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的<code>_config.yml</code>中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的<code>/source/css/matery.css</code>文件中，搜索<code>.bg-color</code>来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 和背景颜色相同的文字颜色，目前仅在首页一个地方使用到，你也可以将此样式应用到其他地方. */</span><span class="token selector"><span class="token class">.text-color</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0f9d58</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> blog搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git仓库管理</title>
      <link href="/2018/12/19/git-cao-zuo-cang-ku-guan-li/"/>
      <url>/2018/12/19/git-cao-zuo-cang-ku-guan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h3><p>Git是目前世界上最先进的分布式版本控制系统。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>现在，Git可以在Linux、Unix、Mac和Windows这<br>几大平台上正常运行了。<br>1.linux上安装Git<br>2.windows上安装Git<br>(<a href="https://git-scm.com/download/),然后一路默认。" target="_blank" rel="noopener">https://git-scm.com/download/),然后一路默认。</a></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="设定自己机器的全局变量"><a href="#设定自己机器的全局变量" class="headerlink" title="设定自己机器的全局变量"></a>设定自己机器的全局变量</h4><p> git config –global user.name “Your Name” —— 设定用户名字，随便写<br> git config –global user.email “<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“ ——设定用户邮箱，随便写<br>注意git config命令的–global参数，用了这个参数，表明你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h4 id="查看自己机器的配置信息"><a href="#查看自己机器的配置信息" class="headerlink" title="查看自己机器的配置信息"></a>查看自己机器的配置信息</h4><p>config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-&gt;global-&gt;local  底层配置会覆盖顶层配置 分别使用–system/global/local 可以定位到配置文件<br>git config –system –list——查看系统config<br>git config –global  –list——查看当前用户（global）配置<br>git config –local  –list—— 查看当前仓库配置信息<br>git config –list ——查看全配置</p><h4 id="额外配置"><a href="#额外配置" class="headerlink" title="额外配置"></a>额外配置</h4><p>git config –global color.ui true ——开启颜色支持<br>git config –global core.quotepath false ——支持utf-8编码</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>git config –global –replace-all user.email “输入你的邮箱”<br>git config –global –replace-all user.name “输入你的用户名”</p><h3 id="创建版本库（repository）"><a href="#创建版本库（repository）" class="headerlink" title="创建版本库（repository）"></a>创建版本库（repository）</h3><p>mkdir directory——创建一个空目录<br>cd directory<br>windows下目录最好不用中文<br>git init——初始化仓库</p><h3 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h3><p>git status</p><h3 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h3><p>touch ddf.txt<br>git add ddf.txt——把文件添加到缓存区<br>git add -A——添加所有文件到仓库<br>这里如果有警告则添加git config –global core.autocrlf false；原因是路径中存在 / 的符号转义问题，false就是不转换符号默认是true，相当于把路径的 / 符号进行转义，这样添加的时候就有问题。<br>git commit -m “first”——把文件提交到仓库<br>git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><h3 id="回溯操作"><a href="#回溯操作" class="headerlink" title="回溯操作"></a>回溯操作</h3><p>git dif——查看difference，即查看修改内容<br>git log——查看提交历史，以便确定要回退到哪个版本。<br>记住：commit_id（版本号）<br>git reset –hard HEAD^——HEAD指向的版本就是当前版本，该指令即为回到上个操作版本<br>git reset –hard commit_id——回溯到相应版本<br>git reflog——查看命令历史，以便确定要回到未来的哪个版本。</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p> git checkout – ddf.txt</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p> rm ddf.txt</p><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>git push——推送，第一次后即用<br>git push  -u origin master——第一次推送master分支的所有内容</p><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><p>1.通过https克隆<br>git clone url<br>2.通过ssh克隆</p><h3 id="从远程添加到本地"><a href="#从远程添加到本地" class="headerlink" title="从远程添加到本地"></a>从远程添加到本地</h3><p> git pull——拉</p>]]></content>
      
      
      <categories>
          
          <category> 仓库管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git仓库管理2</title>
      <link href="/2018/12/18/git-cao-zuo-cang-ku-guan-li-2/"/>
      <url>/2018/12/18/git-cao-zuo-cang-ku-guan-li-2/</url>
      
        <content type="html"><![CDATA[<h6 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h6><ol><li><p>克隆github或者码云上代码到本地</p><pre><code>git clone 分支名仓库名地址</code></pre><p>一般拉取下来的代码，当前分支都在master分支上</p></li><li><p>创建自己的分支</p><pre><code>git checkout -b wanghaifei</code></pre></li><li><p>查看当前修改文件的状态</p><pre><code>git status</code></pre></li><li><p>添加要上传的文件</p><pre><code>git add 修改后的文件</code></pre></li><li><p>提交添加文件的注解</p><pre><code>git commit -m &#39;注解&#39;</code></pre></li><li><p>文件到本地分支中</p><pre><code>git push origin wanghaifei</code></pre></li><li><p>合并添加上传文件和添加上传文件注解到本地分支的操作</p><pre><code>git commit -am &#39;注解&#39;</code></pre></li><li><p>下拉远程自己分支代码到本地自己分支</p><pre><code>git pull origin wanghaifei</code></pre></li></ol><hr><h6 id="代码分支合并，tag提交"><a href="#代码分支合并，tag提交" class="headerlink" title="代码分支合并，tag提交"></a>代码分支合并，tag提交</h6><ol start="9"><li><p>将自己分支代码合并到测试分支以便测试人员测试<br>先切换版本到dev分支</p><pre><code>git checkout dev</code></pre><p>当前dev分支在合并wanghaifei分支</p><pre><code>git merge wanghaifei</code></pre><p>提交dev分支合并的代码到远程dev分支上</p><pre><code>git push origin dev</code></pre></li><li><p>上线代码需要打tag，在master分支打tag<br>打版本v1.0.0.0</p><pre><code>git tag -a 版本号 -m &#39;注解&#39;</code></pre><p>提交版本v1.0.0.0</p><pre><code>git push origin v1.0.0.0</code></pre></li></ol><hr><h6 id="分支版本处理"><a href="#分支版本处理" class="headerlink" title="分支版本处理"></a>分支版本处理</h6><ol start="11"><li><p>删除本地分支</p><pre><code>git branch -D wanghaifei</code></pre></li><li><p>删除git远程分支</p><pre><code>git push origin --delete wanghaifei</code></pre></li><li><p>删除本地tag</p><pre><code>git tag -d v1.0.0.0</code></pre></li><li><p>删除git远程tag</p><pre><code>git push origin --delete tag v1.0.0.0</code></pre></li></ol><ol start="15"><li>查看dev分支和wanghaifei分支的不同<pre><code>git diff dev wanghaifei</code></pre></li></ol><hr><h6 id="缓存机制，在某一个分支修改了代码，但是不想提交该分支，又想切换到另外一个分支在修改相同的代码，就需要使用stash命令"><a href="#缓存机制，在某一个分支修改了代码，但是不想提交该分支，又想切换到另外一个分支在修改相同的代码，就需要使用stash命令" class="headerlink" title="缓存机制，在某一个分支修改了代码，但是不想提交该分支，又想切换到另外一个分支在修改相同的代码，就需要使用stash命令"></a>缓存机制，在某一个分支修改了代码，但是不想提交该分支，又想切换到另外一个分支在修改相同的代码，就需要使用stash命令</h6><ol start="16"><li><p>缓存本地修改的代码</p><pre><code>git stash</code></pre><p>缓存之后，在git status去查看修改代码记录会发现提示 nothing to commit，working tree clean。说明刚才修改的代码都缓存起来了</p></li><li><p>查看缓存的片段</p><pre><code>git stash list</code></pre><p>发现有缓存列表，刚才缓存的记录为 stash@{0}: XXXXXXXXXX</p></li><li><p>还原缓存的代码</p><pre><code>git stash apply stash@{0}</code></pre></li></ol><hr><h6 id="查看某次提交的详情，退回代码到某一次提交"><a href="#查看某次提交的详情，退回代码到某一次提交" class="headerlink" title="查看某次提交的详情，退回代码到某一次提交"></a>查看某次提交的详情，退回代码到某一次提交</h6><ol start="19"><li><p>查看提交的日志记录</p><pre><code>git log</code></pre><p>例如结果提交信息的日志如下：<br><code>`</code><br>commit f9838aa51ca5ccd603e1e8cbd347a43c9cd2e0be<br>Merge: f5847ec 52dc6fa<br>Author: wanghaifei <a href="mailto:&#55;&#55;&#57;&#53;&#x39;&#56;&#49;&#x36;&#48;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;" target="_blank" rel="noopener">&#55;&#55;&#57;&#53;&#x39;&#56;&#49;&#x36;&#48;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a><br>Date:   Mon Jan 29 17:15:34 2018 +0800</p><p>Merge branch ‘whf_p0’ into dev</p></li></ol><p>commit 52dc6fa34f36fae981d1c347825af93a150308fa<br>Author: wanghaifei <a href="mailto:&#55;&#55;&#57;&#53;&#x39;&#x38;&#49;&#x36;&#x30;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;" target="_blank" rel="noopener">&#55;&#55;&#57;&#53;&#x39;&#x38;&#49;&#x36;&#x30;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;</a><br>Date:   Mon Jan 29 17:15:22 2018 +0800</p><pre><code>完成预约增加预约到店时间</code></pre><pre><code>20. 查看某次提交的内容</code></pre><p>git show commit-id</p><pre><code>21. 退回代码回退到当前版本用HEAD表示当前版本，上一个版本是HEAD^,或者使用&lt;u&gt;HEAD~1&lt;/u&gt;，表示上一个版本。HEAD后面是数字可以一直往大了写，只要有那么多老版本</code></pre><p>git reset –hard<br><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> 仓库管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
